{"version":3,"sources":["components/color_picker.jsx","components/solid_page.jsx","components/rainbow_page.jsx","components/fading_page.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ColorPicker","state","color","props","data","r","g","b","toString","slice","console","log","hex","this","rgb","setState","onChangeComplete","style","backgroundColor","rgbToHex","border","width","height","marginBottom","onChange","colorChanged","bind","React","Component","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","SolidPage","className","do_solid_rainbow","update_mode","mode","do_sliding_rainbow","do_off","do_halloween","colors","PrebuildModesPage","Button","onClick","FadingPage","serverState","pushStateChange","Grid","Row","columns","Column","color1Changed","color2Changed","App","Menu","attached","Dropdown","item","icon","simple","Item","as","Link","to","Segment","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86b9b1b4.chunk.js","sourcesContent":["import React from 'react';\nimport {BlockPicker} from 'react-color';\n\n\n\nexport class ColorPicker extends React.Component {\n\n    state = {\n       color: this.props.color\n    }\n\n    rgbToHex(data) {\n        return \"#\" + ((1 << 24) + (data.r << 16) + (data.g << 8) + data.b).toString(16).slice(1);\n    }\n\n    colorChanged(color){\n        console.log(color.hex)\n        let state = this.state\n        state.color = color.rgb\n        this.setState(state)\n        this.props.onChangeComplete(color)\n    }\n\n    render() {\n        return (\n        <>\n            <div style={{\n                backgroundColor: this.rgbToHex(this.state.color),\n                border: \"solid thin black\",\n                width: \"238px\",\n                height: \"50px\",\n                marginBottom: \"10px\"\n            }}/>\n            <BlockPicker onChange={this.colorChanged.bind(this)}/>\n        </>\n        );\n    }\n}","import React from 'react';\nimport {ColorPicker} from \"./color_picker\";\n\nfunction colorChanged(color){\n    console.log(color.hex)\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: {color: color.rgb} })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function SolidPage() {\n  return (\n    <div className=\"App\">\n      <ColorPicker color={{r:255, g:255, b:255}} onChangeComplete={ colorChanged } />\n    </div>\n  );\n}","import React from 'react';\nimport {Button} from \"semantic-ui-react\";\n\n\nfunction do_solid_rainbow() {\n    update_mode({mode: \"solid_rainbow\"})\n}\n\nfunction do_sliding_rainbow() {\n    update_mode({mode: \"sliding_rainbow\"})\n}\n\nfunction do_off() {\n    update_mode({mode: \"off\"})\n}\n\nfunction do_halloween() {\n    update_mode({\n        mode: \"fading\",\n        colors: [\n            {r:255, g:0, b:0},\n            {r:255, g:66, b:0},\n        ]\n    })\n}\n\n\nfunction update_mode(state){\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: state })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function PrebuildModesPage() {\n  return (\n    <div className=\"App\">\n        <Button onClick={do_solid_rainbow}>Solid Rainbow</Button>\n        <br/>\n        <br/>\n\n        <Button onClick={do_sliding_rainbow}>Sliding Rainbow</Button>\n       <br/>\n        <br/>\n\n        <Button onClick={do_halloween}>Halloween</Button>\n        <br/>\n        <br/>\n\n        <Button onClick={do_off}>Off</Button>\n\n    </div>\n  );\n}","import React from 'react';\nimport {Grid} from \"semantic-ui-react\";\nimport {ColorPicker} from \"./color_picker\";\n\n\n\nexport class FadingPage extends React.Component {\n\n    state = {\n       serverState: {\n            mode: \"fading\",\n            colors: [\n                {r:255, g:255, b:255},\n                {r:0, g:0, b:0},\n            ],\n        }\n    }\n\n    pushStateChange(){\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({state: this.state.serverState} )\n        };\n        fetch('/api/v0/state', requestOptions)\n            .then(response => response.json())\n            .then(state => {\n                console.log(state)\n            })\n    }\n\n    rgbToHex(data) {\n        return \"#\" + ((1 << 24) + (data.r << 16) + (data.g << 8) + data.b).toString(16).slice(1);\n    }\n\n    color1Changed(color){\n        console.log(color.hex)\n        let state = this.state\n        state.serverState.colors[0] = color.rgb\n        this.setState(state)\n        this.pushStateChange()\n    }\n\n    color2Changed(color){\n        console.log(color.hex)\n        let state = this.state\n        state.serverState.colors[1] = color.rgb\n        this.setState(state)\n        this.pushStateChange()\n    }\n\n    render() {\n        return (\n            <>\n                <Grid>\n                    <Grid.Row columns={2}>\n                        <Grid.Column>\n                            <ColorPicker color={this.state.serverState.colors[0]} onChangeComplete={this.color1Changed.bind(this)}/>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <ColorPicker color={this.state.serverState.colors[1]} onChangeComplete={this.color2Changed.bind(this)}/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </>\n        );\n    }\n}","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport {SolidPage} from \"./components/solid_page\";\nimport {PrebuildModesPage} from \"./components/rainbow_page\";\nimport {FadingPage} from \"./components/fading_page\";\nimport {Menu, Dropdown, Segment, Container} from \"semantic-ui-react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                  <Menu attached='top'>\n                      <Dropdown item icon='wrench' simple>\n                        <Dropdown.Menu>\n                          <Dropdown.Item as={Link} to=\"/solid\">Solid</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/fading\">Fading</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/prebuilt\">Prebuilt Modes</Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu>\n\n                <Segment attached='bottom'>\n                    <Container>\n                        <Switch>\n                            <Route path=\"/solid\"><SolidPage/></Route>\n                            <Route path=\"/prebuilt\"><PrebuildModesPage/></Route>\n                            <Route path=\"/fading\"><FadingPage/></Route>\n                            <Route path=\"/\"><SolidPage/></Route>\n                        </Switch>\n                    </Container>\n                </Segment>\n\n            </Router>\n      </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}