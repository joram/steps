{"version":3,"sources":["components/color_picker.jsx","components/solid_page.jsx","components/prebuilt_page.jsx","components/fading_page.jsx","components/file_page.jsx","components/solid_rough_page.jsx","components/muffin_page.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ColorPicker","state","color","props","data","r","g","b","toString","slice","console","log","hex","this","rgb","setState","onChangeComplete","e","target","name","value","style","backgroundColor","rgbToHex","border","width","height","marginBottom","onChange","colorChanged","bind","float","paddingTop","max","min","type","colorChangedSingleValue","React","Component","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","SolidPage","className","src","do_solid_rainbow","update_mode","mode","do_sliding_rainbow","do_off","do_per_step","do_nyan_cat","do_nyan_cats","do_halloween","do_solid_sparkly","primary","sparkles","do_chaos_colors","PrebuildModesPage","List","Item","Button","onClick","FadingPage","serverState","colors","pushStateChange","Grid","Row","columns","Column","color1Changed","color2Changed","FilePage","uploadImage","event","a","files","formData","file","post","variance","SolidRoughPage","useState","setVariance","setColor","c","n","MuffinPage","App","Menu","attached","Dropdown","item","icon","simple","as","Link","to","Segment","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.067d8a45.chunk.js","sourcesContent":["import React from 'react';\nimport {CirclePicker} from 'react-color';\n\n\n\nexport class ColorPicker extends React.Component {\n\n    state = {\n       color: this.props.color\n    }\n\n    rgbToHex(data) {\n        return \"#\" + ((1 << 24) + (data.r << 16) + (data.g << 8) + data.b).toString(16).slice(1);\n    }\n\n    colorChanged(color){\n        console.log(color.hex)\n        let state = this.state\n        state.color = color.rgb\n        this.setState(state)\n        this.props.onChangeComplete(color)\n    }\n\n    colorChangedSingleValue(e){\n        let state = this.state\n        state.color[e.target.name] = e.target.value\n        this.setState(state)\n        this.props.onChangeComplete(state.color)\n    }\n\n    render() {\n        console.log(this.state.color)\n        return (\n        <>\n            <div style={{\n                backgroundColor: this.rgbToHex(this.state.color),\n                border: \"solid thin black\",\n                width: \"238px\",\n                height: \"50px\",\n                marginBottom: \"10px\"\n            }}/>\n            <CirclePicker onChange={this.colorChanged.bind(this)}/>\n            <div style={{float:\"left\", paddingTop:\"10px\"}}>\n                <input\n                    max={255}\n                    min={0}\n                    name=\"r\"\n                    type=\"number\"\n                    style={{width:\"80px\"}}\n                    value={this.state.color.r}\n                    onChange={this.colorChangedSingleValue.bind(this)}\n                />\n                <input\n                    max={255}\n                    min={0}\n                    name=\"g\"\n                    type=\"number\"\n                    style={{width:\"80px\"}}\n                    value={this.state.color.g}\n                    onChange={this.colorChangedSingleValue.bind(this)}\n                />\n                <input\n                    max={255}\n                    min={0}\n                    name=\"b\"\n                    type=\"number\"\n                    style={{width:\"80px\"}}\n                    value={this.state.color.b}\n                    onChange={this.colorChangedSingleValue.bind(this)}\n                />\n            </div>\n        </>\n        );\n    }\n}","import React from 'react';\nimport {ColorPicker} from \"./color_picker\";\n\nfunction colorChanged(color){\n    console.log(color.hex)\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: {color: color.rgb} })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function SolidPage() {\n  return (\n    <div className=\"App\">\n      <ColorPicker color={{r:255, g:255, b:255}} onChangeComplete={ colorChanged } />\n      <img src=\"/video_feed\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport {List, Button} from \"semantic-ui-react\";\n\n\nfunction do_solid_rainbow() { update_mode({mode: \"solid_rainbow\"}) }\n\nfunction do_sliding_rainbow() { update_mode({mode: \"sliding_rainbow\"}) }\n\nfunction do_off() { update_mode({mode: \"off\"}) }\n\nfunction do_per_step() { update_mode({mode: \"per_step\"}) }\n\nfunction do_nyan_cat() { update_mode({mode: \"nyan_cat\"}) }\n\nfunction do_nyan_cats() { update_mode({mode: \"nyan_cats\"}) }\n\nfunction do_halloween() {update_mode({mode: \"halloween\"}) }\n\n\n\n\n\n\nfunction do_solid_sparkly() {\n    update_mode({\n        mode: \"solid_sparkly\",\n        //TODO: get primary, sparkles from UI\n        primary: {r:0, g:50, b:0},\n        sparkles: {r:255, g:255, b:255},\n    })\n}\n\n\nfunction do_chaos_colors() {\n    update_mode({\n        mode: \"chaos_colors\"\n    })\n}\n\n//TODO: add 'raindrops' and 'mode_chaos_colors' in many places\n\n\nfunction update_mode(state){\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: state })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function PrebuildModesPage() {\n  return (\n    <div className=\"App\">\n        <List>\n            <List.Item><Button onClick={do_solid_rainbow}>Solid Rainbow</Button></List.Item>\n            <List.Item><Button onClick={do_sliding_rainbow}>Sliding Rainbow</Button></List.Item>\n            <List.Item><Button onClick={do_halloween}>Halloween</Button></List.Item>\n            <List.Item><Button onClick={do_per_step}>Per Step</Button></List.Item>\n            <List.Item><Button onClick={do_nyan_cat}>Nyan Cat</Button></List.Item>\n            <List.Item><Button onClick={do_nyan_cats}>Nyan Cats</Button></List.Item>\n            <List.Item><Button onClick={do_solid_sparkly}>Solid Sparkly</Button></List.Item>\n            <List.Item><Button onClick={do_chaos_colors}>Chaos Colors</Button></List.Item>\n            <List.Item><Button onClick={do_off}>Off</Button></List.Item>\n        </List>\n    </div>\n  );\n}","import React from 'react';\nimport {Grid} from \"semantic-ui-react\";\nimport {ColorPicker} from \"./color_picker\";\n\n\n\nexport class FadingPage extends React.Component {\n\n    state = {\n       serverState: {\n            mode: \"fading\",\n            colors: [\n                {r:255, g:255, b:255},\n                {r:0, g:0, b:0},\n            ],\n        }\n    }\n\n    pushStateChange(){\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({state: this.state.serverState} )\n        };\n        fetch('/api/v0/state', requestOptions)\n            .then(response => response.json())\n            .then(state => {\n                console.log(state)\n            })\n    }\n\n    rgbToHex(data) {\n        return \"#\" + ((1 << 24) + (data.r << 16) + (data.g << 8) + data.b).toString(16).slice(1);\n    }\n\n    color1Changed(color){\n        console.log(color.hex)\n        let state = this.state\n        state.serverState.colors[0] = color.rgb\n        this.setState(state)\n        this.pushStateChange()\n    }\n\n    color2Changed(color){\n        console.log(color.hex)\n        let state = this.state\n        state.serverState.colors[1] = color.rgb\n        this.setState(state)\n        this.pushStateChange()\n    }\n\n    render() {\n        return (\n            <>\n                <Grid>\n                    <Grid.Row columns={2}>\n                        <Grid.Column>\n                            <ColorPicker color={this.state.serverState.colors[0]} onChangeComplete={this.color1Changed.bind(this)}/>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <ColorPicker color={this.state.serverState.colors[1]} onChangeComplete={this.color2Changed.bind(this)}/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </>\n        );\n    }\n}","import React from 'react';\nimport {ColorPicker} from \"./color_picker\";\n\n\nexport function FilePage() {\n    const uploadImage = async  (event) => {\n        console.log(event.target.files[0]);\n        const requestOptions = {\n            method: 'POST',\n        };\n        let formData = {\n          name: event.target.files[0].name,\n          file: event.target.files[0]\n        };\n        console.log(formData)\n        fetch('http://localhost:5000/api/v0/file', requestOptions, formData=formData)\n            // .then(response => response.json())\n            // .then(state => {\n            //     console.log(state)\n            // })\n\n    };\n  return (\n    <div className=\"App\">\n      <div>Pick an image that is 300 pixels tall</div>\n      <input type=\"file\" name=\"image\" onChange={uploadImage} />\n    </div>\n  );\n}","import React, {useState} from 'react';\nimport {ColorPicker} from \"./color_picker\";\nimport NumberInput from 'semantic-ui-react-numberinput';\n\nfunction post(color, variance){\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({state: {\n            mode: \"solid_rough\",\n            color: color,\n            variance: variance,\n        }})\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\n\nexport function SolidRoughPage() {\n  const [variance, setVariance] = useState(10);\n  const [color, setColor] = useState( {r:0, b:0, g:0});\n\n  function colorChanged(c) {\n    setColor(c.rgb)\n    post(color, variance)\n  }\n\n  function varianceChanged(n){\n    setVariance(n)\n    post(color, variance)\n  }\n\n  return (\n    <div className=\"App\">\n      <ColorPicker color={{r:255, g:255, b:255}} onChangeComplete={ colorChanged } />\n      <br/>\n      <NumberInput value={variance} onChange={varianceChanged} />\n    </div>\n  );\n}","import React, {useState} from 'react';\nimport {ColorPicker} from \"./color_picker\";\n\nfunction post(color, variance){\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({state: {\n            mode: \"solid_rough\",\n            color: color,\n            variance: variance,\n        }})\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\n\nexport function MuffinPage() {\n  const [variance, setVariance] = useState(10);\n  const [color, setColor] = useState( {r:0, b:0, g:0});\n\n  return (\n    <div className=\"App\">\n        new logic goes here\n    </div>\n  );\n}\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport {SolidPage} from \"./components/solid_page\";\nimport {PrebuildModesPage} from \"./components/prebuilt_page\";\nimport {FadingPage} from \"./components/fading_page\";\nimport {Menu, Dropdown, Segment, Container} from \"semantic-ui-react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {FilePage} from \"./components/file_page\";\nimport {SolidRoughPage} from \"./components/solid_rough_page\";\nimport {MuffinPage} from \"./components/muffin_page\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                  <Menu attached='top'>\n                      <Dropdown item icon='wrench' simple>\n                        <Dropdown.Menu>\n                          <Dropdown.Item as={Link} to=\"/solid\">Solid</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/solid_rough\">Solid Rough</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/fading\">Fading</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/prebuilt\">Prebuilt Modes</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/muffin\">Muffin Mode</Dropdown.Item>\n                          <Dropdown.Item as={Link} to=\"/file\">File Upload</Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Menu>\n\n                <Segment attached='bottom'>\n                    <Container>\n                        <Switch>\n                            <Route path=\"/file\"><FilePage/></Route>\n                            <Route path=\"/solid\"><SolidPage/></Route>\n                            <Route path=\"/solid_rough\"><SolidRoughPage/></Route>\n                            <Route path=\"/prebuilt\"><PrebuildModesPage/></Route>\n                            <Route path=\"/fading\"><FadingPage/></Route>\n                            <Route path=\"/muffin\"><MuffinPage/></Route>\n                            <Route path=\"/\"><SolidPage/></Route>\n                        </Switch>\n                    </Container>\n                </Segment>\n\n            </Router>\n      </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}