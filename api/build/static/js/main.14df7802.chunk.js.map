{"version":3,"sources":["components/solid_page.jsx","components/rainbow_page.jsx","components/fading_page.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["colorChanged","color","console","log","hex","requestOptions","method","headers","body","JSON","stringify","state","rgb","fetch","then","response","json","SolidPage","className","onChangeComplete","do_rainbow","mode","RainbowPage","Button","onClick","serverState","colors","r","g","b","color1Changed","color2Changed","FadingPage","App","Divider","horizontal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yPAGA,SAASA,EAAaC,GAClBC,QAAQC,IAAIF,EAAMG,KAClB,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,CAACV,MAAOA,EAAMW,QAEhDC,MAAM,gBAAiBR,GAClBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAH,GACFT,QAAQC,IAAIQ,MAIjB,SAASM,IACd,OACE,yBAAKC,UAAU,OAEb,kBAAC,eAAD,CAAcC,iBAAmBnB,K,aCjBvC,SAASoB,EAAWnB,GAChBC,QAAQC,IAAIF,EAAMG,KAClB,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,CAACU,KAAM,cAEzCR,MAAM,gBAAiBR,GAClBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAH,GACFT,QAAQC,IAAIQ,MAIjB,SAASW,IACd,OACE,yBAAKJ,UAAU,OACX,kBAACK,EAAA,EAAD,CAAQC,QAASJ,GAAjB,eClBR,IAAIK,EAAc,CACdJ,KAAM,SACNK,OAAQ,CACJ,CAACC,EAAE,IAAKC,EAAE,IAAKC,EAAE,KACjB,CAACF,EAAE,EAAGC,EAAE,EAAGC,EAAE,KAGrB,SAASC,EAAc7B,GACnBC,QAAQC,IAAIF,EAAMG,KAClBqB,EAAYC,OAAO,GAAKzB,EAAMW,IAC9B,IAAMP,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACC,MAAOc,KAEjCZ,MAAM,gBAAiBR,GAClBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAH,GACFT,QAAQC,IAAIQ,MAIxB,SAASoB,EAAc9B,GACnBC,QAAQC,IAAIF,EAAMG,KAClBqB,EAAYC,OAAO,GAAKzB,EAAMW,IAC9B,IAAMP,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACC,MAAOc,KAEjCZ,MAAM,gBAAiBR,GAClBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAH,GACFT,QAAQC,IAAIQ,MAIjB,SAASqB,IACd,OACE,oCACE,kBAAC,eAAD,CAAcb,iBAAmBW,IACjC,kBAAC,eAAD,CAAcX,iBAAmBY,K,aCtBxBE,MAbf,WACE,OACE,yBAAKf,UAAU,OACb,kBAACgB,EAAA,EAAD,CAASC,YAAU,IACnB,kBAAClB,EAAD,MACA,kBAACiB,EAAA,EAAD,CAASC,YAAU,IACnB,kBAACb,EAAD,MACA,kBAACY,EAAA,EAAD,CAASC,YAAU,IACnB,kBAACH,EAAD,QCLcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.14df7802.chunk.js","sourcesContent":["import React from 'react';\nimport { CirclePicker } from 'react-color';\n\nfunction colorChanged(color){\n    console.log(color.hex)\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: {color: color.rgb} })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function SolidPage() {\n  return (\n    <div className=\"App\">\n\n      <CirclePicker onChangeComplete={ colorChanged } />\n    </div>\n  );\n}","import React from 'react';\nimport {Button} from \"semantic-ui-react\";\n\n\nfunction do_rainbow(color){\n    console.log(color.hex)\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ state: {mode: \"rainbow\"} })\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function RainbowPage() {\n  return (\n    <div className=\"App\">\n        <Button onClick={do_rainbow}>Do Rainbow</Button>\n    </div>\n  );\n}","import React from 'react';\nimport { CirclePicker } from 'react-color';\n\nlet serverState = {\n    mode: \"fading\",\n    colors: [\n        {r:255, g:255, b:255},\n        {r:0, g:0, b:0},\n    ],\n}\nfunction color1Changed(color){\n    console.log(color.hex)\n    serverState.colors[0] = color.rgb\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({state: serverState} )\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nfunction color2Changed(color){\n    console.log(color.hex)\n    serverState.colors[1] = color.rgb\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({state: serverState} )\n    };\n    fetch('/api/v0/state', requestOptions)\n        .then(response => response.json())\n        .then(state => {\n            console.log(state)\n        })\n}\n\nexport function FadingPage() {\n  return (\n    <>\n      <CirclePicker onChangeComplete={ color1Changed } />\n      <CirclePicker onChangeComplete={ color2Changed } />\n    </>\n  );\n}","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport {SolidPage} from \"./components/solid_page\";\nimport {RainbowPage} from \"./components/rainbow_page\";\nimport {FadingPage} from \"./components/fading_page\";\nimport {Divider} from \"semantic-ui-react\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Divider horizontal />\n      <SolidPage />\n      <Divider horizontal />\n      <RainbowPage />\n      <Divider horizontal />\n      <FadingPage />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}